# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Coating_Cycle_Customizer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
STYLE GUIDE:
(Colors in HSB)

Bright: 310 25 90
Grey: 280 25 75
Dark: 250 75 50
"""


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QWidget, QVBoxLayout
from PyQt5.QtCore import Qt
import CycleEditor
from CycleEditor import CoatCycle
import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow, ActiveCycle: CoatCycle):
        self.active_cycle = ActiveCycle
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.setWindowIcon(QtGui.QIcon("prism_icon.jpg"))
        MainWindow.resize(1024, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setObjectName("stackedWidget")
        self.setupMainMenu()
        self.setupCycleEditor()
        self.setupSettings()
        self.horizontalLayout.addWidget(self.stackedWidget)
        self.stackedWidget.setCurrentIndex(0)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1022, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setupCycleEditor(self):
        self.widget_CycleEditor = QtWidgets.QWidget()
        self.widget_CycleEditor.setObjectName("widget_CycleEditor")

        self.label_numberOfCycles = QLabel(self.widget_CycleEditor)
        self.label_numberOfCycles.setGeometry(QtCore.QRect(10, 510, 150, 30))
        self.label_numberOfCycles.setText("Number of Cycles:")
        self.lineEdit_numberOfCycles = QtWidgets.QLineEdit(self.widget_CycleEditor)
        self.lineEdit_numberOfCycles.setGeometry(QtCore.QRect(160, 510, 50, 30))

        self.Add_Coating_Step = QtWidgets.QFrame(self.widget_CycleEditor)
        self.Add_Coating_Step.setGeometry(QtCore.QRect(640, 10, 361, 231))
        self.Add_Coating_Step.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Add_Coating_Step.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Add_Coating_Step.setObjectName("Add_Coating_Step")

        
        self.button_addStep = QtWidgets.QPushButton(self.Add_Coating_Step)
        self.button_addStep.setGeometry(QtCore.QRect(4, 150, 331, 31))
        self.button_addStep.setObjectName("button_addStep")
        self.button_addStep.clicked.connect(self.addStepWidget)

        self.selectCoating = QtWidgets.QComboBox(self.Add_Coating_Step)
        self.selectCoating.setGeometry(QtCore.QRect(150, 40, 181, 31))
        self.selectCoating.setObjectName("selectCoating")
        self.selectCoating.addItem("")
        self.selectCoating.addItem("")
        self.selectCoating.addItem("")
        self.selectCoating.addItem("")

        self.lineEdit_numberOfCoats = QtWidgets.QLineEdit(self.Add_Coating_Step)
        self.lineEdit_numberOfCoats.setGeometry(QtCore.QRect(220, 90, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit_numberOfCoats.setFont(font)
        self.lineEdit_numberOfCoats.setText("")
        self.lineEdit_numberOfCoats.setObjectName("lineEdit_numberOfCoats")

        self.label_selectCoating = QtWidgets.QLabel(self.Add_Coating_Step)
        self.label_selectCoating.setGeometry(QtCore.QRect(0, 40, 131, 31))
        self.label_selectCoating.setObjectName("label_selectCoating")

        self.label_numberOfCoats = QtWidgets.QLabel(self.Add_Coating_Step)
        self.label_numberOfCoats.setGeometry(QtCore.QRect(0, 90, 191, 31))
        self.label_numberOfCoats.setObjectName("label_numberOfCoats")

        self.Coating_Step_List = QtWidgets.QFrame(self.widget_CycleEditor)
        self.Coating_Step_List.setGeometry(QtCore.QRect(0, 0, 630, 500))
        self.Coating_Step_List.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Coating_Step_List.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Coating_Step_List.setObjectName("Coating_Step_List")
        self.Coating_Step_List_Layout = QVBoxLayout(self.Coating_Step_List)

        self.button_Home_CycleEditor = QtWidgets.QPushButton(self.widget_CycleEditor)
        self.button_Home_CycleEditor.setGeometry(QtCore.QRect(640, 500, 150, 40))
        self.button_Home_CycleEditor.setText("Return Home") # TODO: Make into a SAVE AND RETURN
        self.button_Home_CycleEditor.clicked.connect(self.clickedHome)

        self.button_SaveCycleEditor = QtWidgets.QPushButton(self.widget_CycleEditor)
        self.button_SaveCycleEditor.setGeometry(QtCore.QRect(810, 500, 150, 40))
        self.button_SaveCycleEditor.setText("Save")
        self.button_SaveCycleEditor.clicked.connect(self.clickedSaveCycleEditor)

        self.button_StartCycle = QtWidgets.QPushButton(self.widget_CycleEditor)
        self.button_StartCycle.setGeometry(QtCore.QRect(640, 440, 320, 50))
        self.button_StartCycle.setText("Start Cycle")
        self.button_StartCycle.clicked.connect(self.clickedStartCycle)

        self.button_LoadCycle = QtWidgets.QPushButton(self.widget_CycleEditor)
        self.button_LoadCycle.setGeometry(QtCore.QRect(640, 380, 320, 50))
        self.button_LoadCycle.setText("Load Saved Cycle")
        self.button_LoadCycle.clicked.connect(self.clickedLoadCycle)

        self.stackedWidget.addWidget(self.widget_CycleEditor)

    def setupMainMenu(self):
        self.widget_MainMenu = QtWidgets.QWidget()
        self.widget_MainMenu.setObjectName("widget_MainMenu")
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label_Title = QtWidgets.QLabel(self.widget_MainMenu)
        self.label_Title.setGeometry(QtCore.QRect(312, 60, 400, 60))
        self.label_Title.setObjectName("label_Title")
        self.label_Title.setText("PRISM LbL")
        self.label_Title.setAlignment(Qt.AlignmentFlag.AlignHCenter)
        self.label_Title.setFont(font)

        self.button_Start = QtWidgets.QPushButton(self.widget_MainMenu)
        self.button_Start.setGeometry(QtCore.QRect(412, 300, 200, 40))
        self.button_Start.setObjectName("button_Start")
        self.button_Start.setText("Start")
        self.button_Start.clicked.connect(self.clickedStart)

        self.button_Settings = QtWidgets.QPushButton(self.widget_MainMenu)
        self.button_Settings.setGeometry(QtCore.QRect(412, 400, 200, 40))
        self.button_Settings.setObjectName("button_Settings")
        self.button_Settings.setText("Settings")
        self.button_Settings.clicked.connect(self.clickedSettings)

        self.stackedWidget.addWidget(self.widget_MainMenu)
        
    def setupSettings(self):
        font = QtGui.QFont()
        self.widget_Settings = QWidget()
        self.widget_Settings.setObjectName("widget_Settings")

        self.label_Settings = QLabel(self.widget_Settings)
        self.label_Settings.setGeometry(QtCore.QRect(412, 20, 200, 40))
        self.label_Settings.setText("Settings")
        self.label_Settings.setAlignment(Qt.AlignmentFlag.AlignHCenter)
        font.setPointSize(20)
        self.label_Settings.setFont(font)
        
        self.label_Reservoir1 = QLabel(self.widget_Settings)
        self.label_Reservoir1.setGeometry(QtCore.QRect(50, 150, 200, 30))
        self.label_Reservoir1.setText("Name of Reservoir 1:")
        self.lineEdit_Reservoir1 = QtWidgets.QLineEdit(self.widget_Settings)
        self.lineEdit_Reservoir1.setGeometry(QtCore.QRect(250, 150, 250, 30))

        self.label_Reservoir2 = QLabel(self.widget_Settings)
        self.label_Reservoir2.setGeometry(QtCore.QRect(50, 190, 200, 30))
        self.label_Reservoir2.setText("Name of Reservoir 2:")
        self.lineEdit_Reservoir2 = QtWidgets.QLineEdit(self.widget_Settings)
        self.lineEdit_Reservoir2.setGeometry(QtCore.QRect(250, 190, 250, 30))

        self.label_Reservoir3 = QLabel(self.widget_Settings)
        self.label_Reservoir3.setGeometry(QtCore.QRect(50, 230, 200, 30))
        self.label_Reservoir3.setText("Name of Reservoir 3:")
        self.lineEdit_Reservoir3 = QtWidgets.QLineEdit(self.widget_Settings)
        self.lineEdit_Reservoir3.setGeometry(QtCore.QRect(250, 230, 250, 30))

        self.label_Reservoir4 = QLabel(self.widget_Settings)
        self.label_Reservoir4.setGeometry(QtCore.QRect(50, 270, 200, 30))
        self.label_Reservoir4.setText("Name of Reservoir 4:")
        self.lineEdit_Reservoir4 = QtWidgets.QLineEdit(self.widget_Settings)
        self.lineEdit_Reservoir4.setGeometry(QtCore.QRect(250, 270, 250, 30))

        self.button_Home_Settings = QtWidgets.QPushButton(self.widget_Settings)
        self.button_Home_Settings.setGeometry(QtCore.QRect(640, 500, 150, 40))
        self.button_Home_Settings.setText("Return Home") # TODO: Make into a SAVE AND RETURN
        self.button_Home_Settings.clicked.connect(self.clickedHome)

        self.button_SaveSettings = QtWidgets.QPushButton(self.widget_Settings)
        self.button_SaveSettings.setGeometry(QtCore.QRect(810, 500, 150, 40))
        self.button_SaveSettings.setText("Save")
        self.button_SaveSettings.clicked.connect(self.clickedSaveSettings)


        self.stackedWidget.addWidget(self.widget_Settings)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PRISM LbL"))
        self.button_addStep.setText(_translate("MainWindow", "Add Step"))
        self.selectCoating.setItemText(0, _translate("MainWindow", "Reservoir 1"))
        self.selectCoating.setItemText(1, _translate("MainWindow", "Reservoir 2"))
        self.selectCoating.setItemText(2, _translate("MainWindow", "Reservoir 3"))
        self.selectCoating.setItemText(3, _translate("MainWindow", "Reservoir 4"))
        self.label_selectCoating.setText(_translate("MainWindow", "Coating Solution:"))
        self.label_numberOfCoats.setText(_translate("MainWindow", "Number of Coats:"))
    
    def loadStepWidget(self, number_of_coats, coating_solution_index):
        self.unit_step = QWidget()
        self.unit_step.setGeometry(QtCore.QRect(10, 10, 611, 51))
        self.unit_step.setObjectName("unit_step")
        self.unit_step.setStyleSheet("background-color: #E5A1DA")

        self.selectCoating.setCurrentIndex(coating_solution_index)
        coating_solution = self.selectCoating.currentText()

        self.label_Solution = QLabel(self.unit_step)
        self.label_Solution.setGeometry(QtCore.QRect(18, 9, 191, 31))
        self.label_Solution.setAutoFillBackground(True)
        self.label_Solution.setObjectName("label_Solution")
        self.label_Solution.setText(coating_solution)

        self.label_Coats = QtWidgets.QLabel(self.unit_step)
        self.label_Coats.setGeometry(QtCore.QRect(238, 10, 121, 31))
        self.label_Coats.setAutoFillBackground(True)
        self.label_Coats.setObjectName("label_Coats")
        self.label_Coats.setText("Coats: {}".format(number_of_coats))

        self.button_delete = QtWidgets.QPushButton(self.unit_step)
        self.button_delete.setGeometry(QtCore.QRect(510, 13, 75, 31))
        self.button_delete.setObjectName("button_delete")
        self.button_delete.setText("Delete")
        self.button_delete.clicked.connect(self.unit_step.deleteLater)

        self.Coating_Step_List_Layout.addWidget(self.unit_step)

    def addStepWidget(self):
        self.unit_step = QWidget()
        self.unit_step.setGeometry(QtCore.QRect(10, 10, 611, 51))
        self.unit_step.setObjectName("unit_step")
        self.unit_step.setStyleSheet("background-color: #E5A1DA")
        try:
            number_of_coats = int(self.lineEdit_numberOfCoats.text())
        except ValueError:
            print("ERROR Incorrect value entered in Number of Coats, integers only")
            return
        
        coating_solution = self.selectCoating.currentText()
        coating_solution_index = self.selectCoating.currentIndex()

        self.active_cycle.addStep(coating_solution_index, number_of_coats)

        self.label_Solution = QLabel(self.unit_step)
        self.label_Solution.setGeometry(QtCore.QRect(18, 9, 191, 31))
        self.label_Solution.setAutoFillBackground(True)
        self.label_Solution.setObjectName("label_Solution")
        self.label_Solution.setText(coating_solution)

        self.label_Coats = QtWidgets.QLabel(self.unit_step)
        self.label_Coats.setGeometry(QtCore.QRect(238, 10, 121, 31))
        self.label_Coats.setAutoFillBackground(True)
        self.label_Coats.setObjectName("label_Coats")
        self.label_Coats.setText("Coats: {}".format(number_of_coats))

        self.button_delete = QtWidgets.QPushButton(self.unit_step)
        self.button_delete.setGeometry(QtCore.QRect(510, 13, 75, 31))
        self.button_delete.setObjectName("button_delete")
        self.button_delete.setText("Delete")
        self.button_delete.clicked.connect(self.unit_step.deleteLater)

        self.Coating_Step_List_Layout.addWidget(self.unit_step)
    
    def clickedHome(self):
        self.stackedWidget.setCurrentIndex(0)
        self.button_SaveSettings.setText("Save")
        print("Clicked Home\n")

    def clickedStart(self):
        self.stackedWidget.setCurrentIndex(1)
        print("Clicked Start\n")

    def clickedSettings(self):
        self.stackedWidget.setCurrentIndex(2)
        print("Clicked Settings\n")
    
    def clickedSaveSettings(self):
        print("Clicked Save Settings\n")
        self.button_SaveSettings.setText("Saved!")
        text_res1 = self.lineEdit_Reservoir1.text()
        text_res2 = self.lineEdit_Reservoir2.text()
        text_res3 = self.lineEdit_Reservoir3.text()
        text_res4 = self.lineEdit_Reservoir4.text()
        self.selectCoating.setItemText(0, text_res1)
        self.selectCoating.setItemText(1, text_res2)
        self.selectCoating.setItemText(2, text_res3)
        self.selectCoating.setItemText(3, text_res4)
    
    def clickedSaveCycleEditor(self):
        number_of_cycles = self.lineEdit_numberOfCycles.text()
        try:
            self.active_cycle.changeCycleCount(int(number_of_cycles))
        except ValueError:
            print("ERROR Number of Cycles accepts integers only")
        print("Number of cycles: {0}\n Number of steps: {1}\n".format(self.active_cycle.cycle_count, self.active_cycle.step_count))
        print("Saving implemented, but not loading\n")
        arr_reservoir = self.active_cycle.arr_reservoir
        arr_coat_count = self.active_cycle.arr_coat_count
        cycle_count = self.active_cycle.cycle_count
        step_count = self.active_cycle.step_count
        save_vector = [arr_reservoir, arr_coat_count, [step_count, cycle_count]]

        with open("SavedCycle.csv", "w", newline="") as file:
            writer = csv.writer(file)
            for row in save_vector:
                writer.writerow(row)
            print("Cycle data saved to SavedCycle.csv")

    def clickedStartCycle(self):
        number_of_cycles = self.lineEdit_numberOfCycles.text()
        try:
            self.active_cycle.changeCycleCount(int(number_of_cycles))
        except ValueError:
            print("ERROR Number of Cycles accepts integers only")
        print("Beginning coating cycle...\n")
        print("Cycle executor not yet implemented, print dummy will be used instead\n")
        self.active_cycle.executeCycle()

    def clickedLoadCycle(self):
        save_vector = []
        with open("SavedCycle.csv", "r") as file:
            content = csv.reader(file)
            for line in content:
                save_vector.append(line)
        number_of_steps = int(save_vector[2][0])
        number_of_cycles = save_vector[2][1]
        for step in range(number_of_steps):
            coating_solution_index = int(save_vector[0][step])
            number_of_coats = int(save_vector[1][step])
            self.loadStepWidget(number_of_coats, coating_solution_index)
        self.lineEdit_numberOfCycles.setText(number_of_cycles)
        
    




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ActiveCycle = CoatCycle()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow, ActiveCycle)
    MainWindow.show()
    sys.exit(app.exec_())
